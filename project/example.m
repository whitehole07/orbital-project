clear; close all; clc;

%% Create celestial body 
earth = CelestialBody("Earth");
                  
%% Define a state by using cartesian coordinates
state1 = OrbitState( ...
    "r", [26578.137; 0; 0], ...
    "v", [0; 2.221; 3.173], ...
    "body", earth ...
    );
disp(state1)

%% Define a state by using keplerian elements
[~] = OrbitState( ...
    "a", 8350, ...
    "e", 0.19760, ...
    "i", deg2rad(60), ...
    "OM", deg2rad(270), ...
    "om", deg2rad(45), ...
    "f", deg2rad(230), ...
    "body", earth ...
);

% or
state2 = OrbitState( ...
    "kep", [8350 0.19760 deg2rad(60) deg2rad(270) deg2rad(45) deg2rad(230)], ...
    "body", earth ...
);
disp(state2);

%% Propagate the state to get its orbit
orbit2 = state2.propagate();

%% Plot the orbit
orbit2.plot()

%% Plot the groundtrack
orbit2.groundtrack(3.25);

%% Lambert Orbit transfer (Lab 3, Exercise 2)
clear; clc;
% Define a new celestial body neglecting j2 effect
options = struct("J2", false);
earth = CelestialBody("Earth", options);

% Initial state
P1 = OrbitState( ...
    "a", 12500, ...
    "e", 0, ...
    "i", deg2rad(0), ...
    "OM", deg2rad(0), ...
    "om", deg2rad(0), ...
    "f", deg2rad(120), ...
    "body", earth ...
    );

% Final state
P2 = OrbitState( ...
    "a", 9500, ...
    "e", 0.3, ...
    "i", deg2rad(0), ...
    "OM", deg2rad(0), ...
    "om", deg2rad(0), ...
    "f", deg2rad(250), ...
    "body", earth ...
    );

% Time of flight
Dt = 3300; % s

% Lambert Solver
[Dv, arc] = P1.transferTo(P2, Dt);

% Propagate P1 and P2 to get their orbits
orbitP1 = P1.propagate();
orbitP2 = P2.propagate();

% Plot orbits and transfer arc in the same figure
fig = orbitP1.plot();
arc.plot(fig);
orbitP2.plot(fig);

% Plot initial and final positions, same figure again
P1.plot(fig);
P2.plot(fig);

legend("Earth", "Initial orbit", "Transfer orbit", "Final orbit", ...
       "Initial Position", "Final Position")

%% Porkchop Plot (Lab 3 Exercise 3)
clear; clc;

departure_planet = CelestialBody("Earth");
arrival_planet = CelestialBody("Mars");

departure_window = TimeWindow( ...
    Time("date", [2003 4 1 0 0 0]), ...
    Time("date", [2003 8 1 0 0 0]) ...
    );

arrival_window = TimeWindow( ...
    Time("date", [2003 9 1 0 0 0]), ...
    Time("date", [2004 3 1 0 0 0]) ...
    );

step = .5; % days
[dep, arr, Dvs] = getDvs(departure_window, departure_planet, ...
                          arrival_window, arrival_planet, step);

departures = departure_window.getIteratorRaw(step);
arrivals = arrival_window.getIteratorRaw(step);

[y, x] = find(Dvs == min(min(Dvs)));
init_dep = departures(x);
init_arr = arrivals(y);

[min_dep, min_arr, min_Dv] = minDv(init_dep, init_arr, ...
                                   departure_planet, arrival_planet);

porkchopPlot(dep, arr, Dvs);

